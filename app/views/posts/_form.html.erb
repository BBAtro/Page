<%= render 'main/errors', object: @post %>

<%= form_with model: @post do |f|%>

  <div class="flex flex-col justify-items-center">

    <div class="mx-auto mt-5 mb-4">
      <%= f.label :title, class: "border rounded-xl px-6 py-2 mx-auto my-3 font-bold text-2xl dark:bg-zinc-700 dark:border-zinc-700" %>
    </div>

    <div class="mx-auto w-10/12">
      <%= f.text_field :title, required: true, minlength: 2,
      class: "border rounded-xl w-full h-fit p-3 mx-auto text-xl dark:bg-zinc-700 dark:border-zinc-700 shadow-md"%>
    </div>

    <div class="mx-auto mt-4 mb-4">
      <%= f.label :tags, class: "border rounded-xl px-6 py-2 mx-auto my-3 font-bold text-2xl dark:bg-zinc-700 dark:border-zinc-700" %>
    </div>

    <div class="hidden mx-auto w-4/12">
        <%= f.collection_select :tag_ids, (@tags || []), :id, :title, {}, 
        multiple: true, class: "border rounded-xl w-full h-fit p-3 mx-auto text-xl dark:bg-zinc-700 dark:border-zinc-700 shadow-md", id: "select2"%>
    </div>

    <div class="relative flex mx-8" x-data="{ ...selectMultiple('select2') }">

      <!-- Selected -->
      <div class="flex flex-wrap border rounded-xl mx-auto dark:border-zinc-700 dark:bg-zinc-700 shadow-md"
          @click="isOpen = true;"
          @keydown.arrow-down.prevent="if(dropdown.length > 0) document.getElementById(elSelect.id+'_'+dropdown[0].index).focus();">

          <template x-for="(option,index) in selected;" :key="option.value">
              <p class="m-1 self-center p-2 text-md whitespace-nowrap rounded-xl bg-cyan-400 dark:bg-pink-500 cursor-pointer hover:bg-red-500 dark:hover:bg-red-500"
                  x-text="option.text"
                  @click="toggle(option)">
              </p>
          </template>

          <input type="text" placeholder="Select tags" class="pl-2 rounded-xl h-10"
              x-model="term"
              x-ref="input" />
      </div>

      <!-- Dropdown -->
      <div class="absolute rounded-xl right-44 z-10 mt-12 w-1/2 max-h-72 overflow-y-auto bg-white dark:bg-zinc-700 shadow-md"
          x-show="isOpen"
          @mousedown.away="isOpen = false">

          <template x-for="(option,index) in dropdown" :key="option.value">
              <div class="cursor-pointer hover:bg-cyan-400 hover:border-cyan-400 hover:shadow-cyan-400 dark:hover:border-pink-500 dark:hover:bg-pink-500 dark:hover:shadow-pink-500 focus:outline-none"
                  :class="(term.length > 0 && !option.text.toLowerCase().includes(term.toLowerCase())) && 'hidden';"
                  x-init="$el.id = elSelect.id + '_' + option.index; $el.tabIndex = option.index;"
                  @click="toggle(option)"
                  @keydown.enter.prevent="toggle(option);"
                  @keydown.arrow-up.prevent="if ($el.previousElementSibling != null) $el.previousElementSibling.focus();"
                  @keydown.arrow-down.prevent="if ($el.nextElementSibling != null) $el.nextElementSibling.focus();">

                  <p class="p-2"
                    x-text="option.text"></p>
              </div>
          </template>
      </div>
    </div>

    <script>
        document.addEventListener('alpine:init', () => {
            Alpine.data('selectMultiple', (elSelectId) => ({

                elSelect: document.getElementById(elSelectId),
                isOpen: false,
                term: '',

                selected: [],
                dropdown: [],

                // in the <select> element, set the attributes :
                //  "multiple" to avoid to Always set "selected" to the first item
                //  class="hidden" (better than hide it with javascript which has a slow reaction)
                init()
                {
                    for(var index=0; index < this.elSelect.options.length; index++)
                    {
                        if (this.elSelect.options[index].selected)
                            this.selected.push(this.elSelect.options[index]);
                        else
                            this.dropdown.push(this.elSelect.options[index]);
                    }
                },

                toggle(option)
                {
                    var property1 = (option.selected == true) ? 'dropdown' : 'selected';
                    var property2 = (option.selected == true) ? 'selected' : 'dropdown';

                    option.selected = !option.selected;

                    // add
                    this[property1].push(option);

                    // remove
                    this[property2] = this[property2].filter((opt, index)=>{
                        return opt.value != option.value;
                    });
                    
                    // reorder this.dropdown to their original select.options indexes
                    if (property1 == 'dropdown')
                        this.dropdown.sort((opt1, opt2) => (opt1.index > opt2.index) ? 1 : -1)

                    // after adding, re-focus the input
                    if (option.selected)
                        this.$refs.input.focus();
                },
            }))
        });
    </script>

    <hr class="my-5 mx-10">

    <div class="mx-auto mb-4">
      <%= f.label :body, class: "border rounded-xl px-6 py-2 mx-auto my-3 font-bold text-2xl dark:bg-zinc-700 dark:border-zinc-700" %>
    </div>

    
    <div class="mx-auto w-11/12">
        <%= f.text_area :body, required: true, minlength: 2,
        class: "border rounded-xl w-full h-fit p-3 mx-auto text-xl dark:bg-zinc-700 dark:border-zinc-700 shadow-md"%>
    </div>

    <%= f.submit "Submit",
     class: 'border rounded-xl w-1/4 p-2 mx-auto my-5 bg-sky-400 shadow-sky-400 border-sky-400 dark:bg-pink-500 dark:border-pink-500 dark:shadow-pink-500 shadow'%>


<% end %>


<%# , name: "select2[]" %>